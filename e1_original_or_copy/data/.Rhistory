#====================================================================================
# Julian De Freitas, 2019
# Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
# Experiment 1
#====================================================================================
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('rjson',
'tidyverse',
'ltm',
'heplots',
'lmtest',
'compute.es',
'ltm',
'lsr',
'lsmeans',
'nnet',
'mlogit'
)
#====================================================================================
#                             PRE-PROCESSING
#====================================================================================
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set working directory to ../data/
setwd("../data/")
data <- do.call(rbind,
lapply(list.files(pattern=('*txt')),
function(x) as.data.frame(fromJSON(fil =x))))
## Before attention
nrow(data)
## Attention Checks
data |>
filter(trialStruct.attention == 0)  -> data
## Number of Participants after attention exclusion
nrow(data)
## Comprehension Checks
data |>
filter(
trialStruct.comp_number_copies == 2,
(trialStruct.cond_num == 1 & trialStruct.comp_original_you == 1) |
(trialStruct.cond_num == 2 & trialStruct.comp_original_you == 1) |
(trialStruct.cond_num == 3 & trialStruct.comp_original_you == 2) |
(trialStruct.cond_num == 4 & trialStruct.comp_original_you == 2)
) -> data
## Final Sample
nrow(data)
## Clean column names
colnames(data) <- gsub("trialStruct.", "", colnames(data))
data |>
select(original_cond, perspective_cond, identity, age, sex) -> data
colnames(data) <- c("living", "persp", "identity", "age", "sex")
data |>
mutate(
copy = ifelse(identity == 2, 1, 0),
original = ifelse(identity == 1, 1, 0),
both = ifelse(identity == 4, 1, 0),
neither = ifelse(identity == 3, 1, 0)
) -> data
## Demographics
mean(data$age)
table(data$sex)
#====================================================================================
#                               ANALYSIS
#====================================================================================
data |>
select(copy, original, both, neither, persp, living) -> d
table(d$persp, d$living)
# For third and living
## Identify as ORIGINAL
mean(d[d$persp == "third" & d$living == "alive",]$original)
## Identify as COPY
mean(d[d$persp == "third" & d$living == "alive",]$copy)
## Identify as BOTH
mean(d[d$persp == "third" & d$living == "alive",]$both)
## Identify as NEITHER
mean(d[d$persp == "third" & d$living == "alive",]$neither)
d |>
gather(key = "identity", value = "flag", original, copy, both, neither) |>
filter(flag == 1) |>
mutate(
identity = gsub("", "", identity),
identity_dummy = relevel(as.factor(identity), ref = "original"),
persp = relevel(as.factor(persp), ref = "third"),
living = relevel(as.factor(living), ref = "alive")
) -> d_reg
## Regressions
reg1 <- multinom(identity_dummy ~ persp + living, data = d_reg)
s <- summary(reg1)
z <- s$coefficients/s$standard.errors
p <- (1 - pnorm(abs(z), 0, 1)) * 2
## (1) Identifying as COPY based on IV (Dead v. Alive)
## Identify with copy when original is dead
mean(d[d$living == "dead",]$copy) * 100
### Beta Coefficient
s$coefficients[ "copy" , "livingdead" ]
### Standard Error
s$standard.errors[ "copy" , "livingdead" ]
### p-value
p[ "copy" , "livingdead" ]
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 1
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(lsmeans)) {install.packages("lsmean"); require(lsmeans)}
if (!require(nnet)) {install.packages("nnet"); require(nnet)}
if (!require(mlogit)) {install.packages("mlogit"); require(mlogit)}
# Set wd to current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set working directory to ../data/
setwd("../data/")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data <- (data <- do.call(rbind, data))
dim(data) #400
#exclude those who failed attention check
data <- subset(data, (data$trialStruct.attention == 0) & (data$trialStruct.comp_number_copies == 2))
#exclude those who failed comprehension check
for(i in 1:dim(data)[1]) {
if( (data$trialStruct.cond_num[i] == 1) & (data$trialStruct.comp_original_you[i] == 1) ) {
data$exclude[i] = 0
}
else if ( (data$trialStruct.cond_num[i] == 2) & (data$trialStruct.comp_original_you[i] == 1) ) {
data$exclude[i] = 0
}
else if ( (data$trialStruct.cond_num[i] == 3) & (data$trialStruct.comp_original_you[i] == 2) ) {
data$exclude[i] = 0
}
else if ( (data$trialStruct.cond_num[i] == 4) & (data$trialStruct.comp_original_you[i] == 2) ) {
data$exclude[i] = 0
}
else {
data$exclude[i] = 1
}
}
data <- subset(data, data$exclude == 0)
dim(data)
age <- as.numeric(data$trialStruct.age); mean(age,na.rm = TRUE) #35.9
gender <- as.factor(data$trialStruct.sex); table(gender)[2]/sum(table(gender)) #48.9
#code condition names
for(i in 1:dim(data)[1]) {
if(data$trialStruct.identity[i] == 1) {
data$identity_name[i] = '1_original'
data$two_or_one[i] = 'one'
data$identity_b_original[i] = 1
data$identity_b_copy[i] = 0
data$identity_b_neither[i] = 0
data$identity_b_both[i] = 0
}
else if(data$trialStruct.identity[i] == 2) {
data$identity_name[i] = '2_copy'
data$two_or_one[i] = 'one'
data$identity_b_original[i] = 0
data$identity_b_copy[i] = 1
data$identity_b_neither[i] = 0
data$identity_b_both[i] = 0
}
else if(data$trialStruct.identity[i] == 3) {
data$identity_name[i] = '3_neither'
data$two_or_one[i] = 'neither'
data$identity_b_original[i] = 0
data$identity_b_copy[i] = 0
data$identity_b_neither[i] = 1
data$identity_b_both[i] = 0
}
else if(data$trialStruct.identity[i] == 4) {
data$identity_name[i] = '4_both'
data$two_or_one[i] = 'two'
data$identity_b_original[i] = 0
data$identity_b_copy[i] = 0
data$identity_b_neither[i] = 0
data$identity_b_both[i] = 1
}
}
data$identity_name <- as.factor(data$identity_name)
data$two_or_one <- as.factor(data$two_or_one)
living <- as.factor(data$trialStruct.original_cond)
persp <- as.factor(data$trialStruct.perspective_cond)
cond <- as.factor(data$trialStruct.cond_num)
identity <- as.numeric(data$trialStruct.identity)
b_identity <- as.numeric(data$identity_binary) #binary identity
moral <- as.numeric(data$trialStruct.moral)
edu_science <- as.numeric(data$trialStruct.edu_science)
edu_phil <- as.numeric(data$trialStruct.edu_phil)
identity_b_original <- as.numeric(data$identity_b_original)
identity_b_copy <- as.numeric(data$identity_b_copy)
identity_b_neither <- as.numeric(data$identity_b_neither)
identity_b_both <- as.numeric(data$identity_b_both)
data$living <- living
data$persp <- persp
#export subset of data for multinomial logistic regression in SPSS
data_export <- data[,c(30:37)]
write.csv(data_export, 'data_e1.csv')
# Training the multinomial model
multinom_model <- multinom(identity_name ~ living + persp, data = data)
data$identity_name
# Checking the model
summary(multinom_model)
# Calculate p-value from standard error
z <- summary(multinom_model)$coefficients / summary(multinom_model)$standard.errors
p <- (1 - pnorm(abs(z), 0, 1)) * 2
print("p-values: ")
print(p)
