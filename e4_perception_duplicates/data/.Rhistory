}
condNum <- as.factor(data$condNum)
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
matchConds <- unique(matchCond)
label <- as.factor(data$label)
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers),7))
colnames(d_mat) <- c('worker', 'mainCond', 'agentCond', 'hits', 'false_alarms', 'd', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
#for each worker and agent condition, get average hits, false alarms, d-prime, and rt
#hits: proportion of true hits you said were hits (out of all true hits)
#false alarms: proportin of non hits you said were hits (out of all non hits)
#get rts for trials that were correct
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
length_h <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='y'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='n'])
h <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='y'])/length_h
fa <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n'])/length_fa
rt <- mean(rts[worker==workers[i] & agentCond_n==j & acc_use==1], na.rm=TRUE)
#correction for if h=1 or fa=0, by (Macmillan & Kaplan, 1985)
#if fa = 0, 0.5/𝑛; ifh= 1, (𝑛−0.5)/𝑛 , where n is the number of signal or noise trials
#see https://stats.stackexchange.com/questions/134779/d-prime-with-100-hit-rate-probability-and-0-false-alarm-probability
if(h==1) {
h <- (length_h-0.5)/length_h
}
if(fa==0) {
fa <- 0.05/length_fa
}
if(h==0) {
h <- 0.05/length_fa
}
d.mat[counter,] <- c(workers[i],unique(condNum[worker==workers[i]]), j, h, fa, qnorm(h) - qnorm(fa), rt)
counter = counter + 1
}
}
# collect total performance and performance difference (cond 1 - 2) for each subject
perf_mat <- array(0, dim=c(length(workers), 3))
colnames(perf_mat) <- c('mainCond', 'perf_diff', 'total_perf')
perf.mat <- as.data.frame(perf_mat, stringsAsFactors=FALSE); perf.mat
for(i in 1:length(workers)) {
perf.mat[i,1] <- unique(d.mat$mainCond[d.mat$worker==i])
if(unique(d.mat$mainCond[d.mat$worker==i]) == 1) {
#future-you1 - john
perf.mat[i,2] <- d.mat$d[d.mat$worker==i & d.mat$agentCond == 1] - d.mat$d[d.mat$worker==i & d.mat$agentCond == 2]
}
else if(unique(d.mat$mainCond[d.mat$worker==i]) == 2) {
#best of future-you1 and future-you2 - john
perf.mat[i,2] <- max(d.mat$d[d.mat$worker==i & d.mat$agentCond == 1], d.mat$d[d.mat$worker==i & d.mat$agentCond == 2]) - d.mat$d[d.mat$worker==i & d.mat$agentCond == 3]
}
perf.mat[i,3] <- d.mat$d[d.mat$worker==i & d.mat$agentCond == 1] + d.mat$d[d.mat$worker==i & d.mat$agentCond == 2] + d.mat$d[d.mat$worker==i & d.mat$agentCond == 3]
}
#make matrix for measuring confusions
conf_mat <- array(0,dim=c(3*length(workers),7))
colnames(conf_mat) <- c('worker', 'self_cond', 'agentCond', 'n_fa', 'n_self', 'n_stranger', 'diff')
conf.mat <- as.data.frame(conf_mat, stringsAsFactors=FALSE); conf.mat
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
total_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='n'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n'])/total_fa
length_self <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n' & (label == 'young-you' | label == 'old-you')])/total_fa
length_stranger <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n' & label == 'stranger-john'])/total_fa
conf.mat[counter,] <- c (workers[i], unique(condNum[worker==workers[i]]),
j, length_fa, length_self, length_stranger, length_self - length_stranger )
counter = counter + 1
}
}
conf.mat <- subset(conf.mat, conf.mat$self_cond == 3); conf.mat
conf.mat
mean(conf.mat$diff[conf.mat$agentCond == 1])
mean(conf.mat$diff[conf.mat$agentCond == 2])
conf_1 <- t.test(conf.mat$n_self[conf.mat$agentCond==1], conf.mat$n_stranger[conf.mat$agentCond==1], var.equal=TRUE, paired=TRUE); conf_1
tes(as.numeric(conf_1[1]), dim(conf.mat)[1],  dim(conf.mat)[1]) #cohen's d
conf_2 <- t.test(conf.mat$n_self[conf.mat$agentCond==2], conf.mat$n_stranger[conf.mat$agentCond==2], var.equal=TRUE, paired=TRUE); conf_2
tes(as.numeric(conf_2[1]), dim(conf.mat)[1],  dim(conf.mat)[1]) #cohen's d
conf_diff <- t.test(conf.mat$diff[conf.mat$agentCond==1], conf.mat$diff[conf.mat$agentCond==2], var.equal=TRUE, paired=TRUE); conf_diff
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity limit of personal identity
#Experiment 18
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e19_perception_alternatives_easy/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
##================================================================================================================
##DATA PREP##
##================================================================================================================
#perform exclusions: attention, comprehension, and rts < 200 (this ends up performing both subject and trial)
#note, we exclude based on mean accuracy further below
data <- subset(data,(data$attentionMCQ=="0" & data$comp =="D"))
length(unique(data$workerId)) #1 subjects
data$rt[is.na(data$rt)] <- 0
#mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
#exclude subjects with lower than 55% average accuracy
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0 #if na, just say it's accuracy of 0
perf_thresh <- 0.55
trial_thresh <- 0.5
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
data <- subset(data,data$workerId != workers[i])
}
}
ss_excl_mat
#check it worked
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
}
ss_excl_mat
#final subjects after exclusions
length(unique(data$workerId)) #24 subjects
#check that numbers for each condition look reasonable
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
#assign variable names
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
n_aft_excl <- length(workers); n_aft_excl
n_excl <- n_bef_excl - n_aft_excl; n_excl
age <- as.numeric(data$age); mean(age,na.rm = TRUE)
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
numTrials <- dim(data)[1]
matchCond <- as.factor(data$matchCond)
agentCond <- as.factor(data$agentCond)
condNum <- as.factor(data$condNum)
#create numeric version of condition
for(i in 1:length(agentCond)) {
if(condNum[i] == 1) {
if(agentCond[i] == 'healthy-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
}
else if(condNum[i] == 2) {
if(agentCond[i] == 'healthy-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'unhealthy-you') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 3
}
data$condNum[i] <- 3
}
else if(condNum[i] == 3) {
if(agentCond[i] == 'unhealthy-you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
data$condNum[i] <- 2
}
}
condNum <- as.factor(data$condNum)
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
matchConds <- unique(matchCond)
label <- as.factor(data$label)
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers),7))
colnames(d_mat) <- c('worker', 'mainCond', 'agentCond', 'hits', 'false_alarms', 'd', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
#for each worker and agent condition, get average hits, false alarms, d-prime, and rt
#hits: proportion of true hits you said were hits (out of all true hits)
#false alarms: proportin of non hits you said were hits (out of all non hits)
#get rts for trials that were correct
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
length_h <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='y'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='n'])
h <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='y'])/length_h
fa <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n'])/length_fa
rt <- mean(rts[worker==workers[i] & agentCond_n==j & acc_use==1], na.rm=TRUE)
#correction for if h=1 or fa=0, by (Macmillan & Kaplan, 1985)
#if fa = 0, 0.5/𝑛; ifh= 1, (𝑛−0.5)/𝑛 , where n is the number of signal or noise trials
#see https://stats.stackexchange.com/questions/134779/d-prime-with-100-hit-rate-probability-and-0-false-alarm-probability
if(h==1) {
h <- (length_h-0.5)/length_h
}
if(fa==0) {
fa <- 0.05/length_fa
}
d.mat[counter,] <- c(workers[i],unique(condNum[worker==workers[i]]), j, h, fa, qnorm(h) - qnorm(fa), rt)
counter = counter + 1
}
}
# collect total performance and performance difference (cond 1 - 2) for each subject
perf_mat <- array(0, dim=c(length(workers), 3))
colnames(perf_mat) <- c('mainCond', 'perf_diff', 'total_perf')
perf.mat <- as.data.frame(perf_mat, stringsAsFactors=FALSE); perf.mat
for(i in 1:length(workers)) {
perf.mat[i,1] <- unique(d.mat$mainCond[d.mat$worker==i])
if(unique(d.mat$mainCond[d.mat$worker==i]) == 1) {
#future-you1 - john
perf.mat[i,2] <- d.mat$d[d.mat$worker==i & d.mat$agentCond == 1] - d.mat$d[d.mat$worker==i & d.mat$agentCond == 2]
}
else if(unique(d.mat$mainCond[d.mat$worker==i]) == 2) {
#best of future-you1 and future-you2 - john
perf.mat[i,2] <- max(d.mat$d[d.mat$worker==i & d.mat$agentCond == 1], d.mat$d[d.mat$worker==i & d.mat$agentCond == 2]) - d.mat$d[d.mat$worker==i & d.mat$agentCond == 3]
}
perf.mat[i,3] <- d.mat$d[d.mat$worker==i & d.mat$agentCond == 1] + d.mat$d[d.mat$worker==i & d.mat$agentCond == 2] + d.mat$d[d.mat$worker==i & d.mat$agentCond == 3]
}
#make matrix for measuring confusions
conf_mat <- array(0,dim=c(3*length(workers),7))
colnames(conf_mat) <- c('worker', 'self_cond', 'agentCond', 'n_fa', 'n_self', 'n_stranger', 'diff')
conf.mat <- as.data.frame(conf_mat, stringsAsFactors=FALSE); conf.mat
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
total_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='n'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n'])/total_fa
length_self <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n' & (label == 'healthy-you' | label == 'unhealthy-you')])/total_fa
length_stranger <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n' & label == 'stranger-john'])/total_fa
conf.mat[counter,] <- c (workers[i], unique(condNum[worker==workers[i]]),
j, length_fa, length_self, length_stranger, length_self - length_stranger )
counter = counter + 1
}
}
conf.mat <- subset(conf.mat, conf.mat$self_cond == 3); conf.mat
conf.mat
label
mean(conf.mat$diff[conf.mat$agentCond == 1])
mean(conf.mat$diff[conf.mat$agentCond == 2])
conf_1 <- t.test(conf.mat$n_self[conf.mat$agentCond==1], conf.mat$n_stranger[conf.mat$agentCond==1], var.equal=TRUE, paired=TRUE); conf_1
tes(as.numeric(conf_1[1]), dim(conf.mat)[1],  dim(conf.mat)[1]) #cohen's d
conf_2 <- t.test(conf.mat$n_self[conf.mat$agentCond==2], conf.mat$n_stranger[conf.mat$agentCond==2], var.equal=TRUE, paired=TRUE); conf_2
tes(as.numeric(conf_2[1]), dim(conf.mat)[1],  dim(conf.mat)[1]) #cohen's d
conf_diff <- t.test(conf.mat$diff[conf.mat$agentCond==1], conf.mat$diff[conf.mat$agentCond==2], var.equal=TRUE, paired=TRUE); conf_diff
mean(conf.mat$diff[conf.mat$agentCond == 1])
mean(conf.mat$diff[conf.mat$agentCond == 1])
mean(conf.mat$diff[conf.mat$agentCond == 2])
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity limit of personal identity
#Experiment 4
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e4_perception_duplicates/data")
# import data
datalist = list()
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
n_bef_excl <- length(unique(data$workerId)); n_bef_excl #201 subjects
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
##================================================================================================================
##DATA PREP##
##================================================================================================================
# perform exclusions: attention, comprehension, and rts < 100 (this ends up performing both subject and trial)
# note, we exclude based on mean accuracy further below
# note, data$comp_mental_content actually refers to comp_number_copies
data <- subset(data,(data$attentionMCQ=="0" & data$comp_original_you==3 &
data$comp_mental_content==2 & data$comp=='D'))
length(unique(data$workerId))
dim(data)
data$rt[is.na(data$rt)] <- 0
# mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
# exclude subjects with lower than 55% average accuracy or rts < 100ms
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
perf_thresh <- 0.55
trial_thresh <- 0.5 #number of trials that need to have rts > 100ms
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]]) #proportion of bad rts
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
data <- subset(data,data$workerId != workers[i])
}
}
ss_excl_mat
#assign variable names
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
n_aft_excl <- length(workers); n_aft_excl
n_excl <- n_bef_excl - n_aft_excl; n_excl
age <- as.numeric(data$age); mean(age,na.rm = TRUE) #32.10
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender)) #0.51
identity_bef <- data$identity_fetus #these variables were just mistakenly named
identity_aft <- data$identity_pvs
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
numTrials <- dim(data)[1]
matchCond <- as.factor(data$matchCond)
agentCond <- as.factor(data$agentCond)
for(i in 1:length(agentCond)) {
if(agentCond[i] == 'original') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'copy') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger') {
data$agentCond_n[i] = 3
}
}
agentCond_n <- as.factor(data$agentCond_n)
label <- as.factor(data$label)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
matchConds <- unique(matchCond)
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers),7))
colnames(d_mat) <- c('worker', 'agentCond', 'hits', 'false_alarms', 'd', 'rt', 'after_resp')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
#for each worker and agent condition, get average hits, false alarms, d-prime, and rt
#hits: proportion of true hits you said were hits (out of all true hits)
#false alarms: proportin of non hits you said were hits (out of all non hits)
#get rts for trials that were correct
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
length_h <- length(acc_use[worker==workers[i] & agentCond_n==agentConds_n[j] & corrAns=='y'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==agentConds_n[j] & corrAns=='n'])
h <- length(acc_use[worker==workers[i] & agentCond_n==agentConds_n[j] & ans=='y' & corrAns=='y'])/length_h
fa <- length(acc_use[worker==workers[i] & agentCond_n==agentConds_n[j] & ans=='y' & corrAns=='n'])/length_fa
rt <- mean(rts[worker==workers[i] & agentCond_n==agentConds_n[j] & acc==1], na.rm=TRUE)
#correction for if h=1 or fa=0, by (Macmillan & Kaplan, 1985)
#if 0, 0.5/𝑛; if 1, (𝑛−0.5)/𝑛 , where n is the number of signal or noise trials
#see https://stats.stackexchange.com/questions/134779/d-prime-with-100-hit-rate-probability-and-0-false-alarm-probability
if(h==1) {
h <- (length_h-0.5)/length_h
}
if(fa==0) {
fa <- 0.05/length_fa
}
d.mat[counter,] <- c (workers[i], agentConds_n[j], h, fa, qnorm(h) - qnorm(fa), rt, mean(identity_aft[worker==workers[i]]))
counter = counter + 1
}
}
#subset d.mat by whether people identified with the original or both
d.mat_o <- subset(d.mat,(d.mat$after==1))
d.mat_b <- subset(d.mat,(d.mat$after==4))
#create matrix for collectin performance difference (self - other) and overall performance
#note, for performance difference we're ignoring people who identified with copy or neither, so perf diff = 0
iden_mat <- array(0,dim=c(length(workers),5))
colnames(iden_mat) <- c('before', 'after','zeros','att_diff', 'total_perf')
for(i in 1:length(workers)) {
iden_mat[i,] <- c( mean(identity_bef[worker==workers[i]]), mean(identity_aft[worker==workers[i]]),0, 0, 0)
}
iden.mat <- as.data.frame(iden_mat, stringsAsFactors=FALSE); iden.mat
for(i in 1:length(workers)) {
if(unique(d.mat$after_resp[d.mat$worker == i]) == 1) { #if they identified with original...
iden.mat[i,4] <- d.mat$d[d.mat$worker==i & d.mat$agentCond == 1] - d.mat$d[d.mat$worker==i & d.mat$agentCond == 3] #original - stranger
}
else if(unique(d.mat$after_resp[d.mat$worker == i]) == 4) { #if they identified with both...
iden.mat[i,4] <- max(d.mat$d[d.mat$worker==i & d.mat$agentCond == 1], (d.mat$d[d.mat$worker==i & d.mat$agentCond == 2])) - d.mat$d[d.mat$worker==i & d.mat$agentCond == 3] #(best of original or copy) - stranger
}
iden.mat[i,5] <- d.mat$d[d.mat$worker==i & d.mat$agentCond == 1] + d.mat$d[d.mat$worker==i & d.mat$agentCond == 2] + d.mat$d[d.mat$worker==i & d.mat$agentCond == 3]
}
#sort identity mat by original - copy
iden_ordered <- iden.mat[order(-iden.mat$att_diff),]
iden_ordered$counter <- c(1:length(workers))
iden_ordered
#make matrix for measuring confusions
conf_mat <- array(0,dim=c(3*length(workers),7))
colnames(conf_mat) <- c('worker', 'after_resp', 'agentCond', 'n_fa', 'n_self', 'n_stranger', 'diff')
conf.mat <- as.data.frame(conf_mat, stringsAsFactors=FALSE); conf.mat
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
total_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='n'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n'])/total_fa
length_self <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n' & (label == 'original' | label == 'copy')])/total_fa
length_stranger <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n' & label == 'stranger'])/total_fa
conf.mat[counter,] <- c (workers[i], mean(identity_aft[worker==workers[i]]), j, length_fa, length_self, length_stranger, length_self - length_stranger)
counter = counter + 1
}
}
conf.mat <- subset(conf.mat, conf.mat$after_resp == 4)
conf.mat
mean(conf.mat$diff[conf.mat$agentCond == 1])
mean(conf.mat$diff[conf.mat$agentCond == 2])
conf_1 <- t.test(conf.mat$n_self[conf.mat$agentCond==1], conf.mat$n_stranger[conf.mat$agentCond==1], var.equal=TRUE, paired=TRUE); conf_1
tes(as.numeric(conf_1[1]), dim(conf.mat)[1],  dim(conf.mat)[1]) #cohen's d
conf_2 <- t.test(conf.mat$n_self[conf.mat$agentCond==2], conf.mat$n_stranger[conf.mat$agentCond==2], var.equal=TRUE, paired=TRUE); conf_2
tes(as.numeric(conf_2[1]), dim(conf.mat)[1],  dim(conf.mat)[1]) #cohen's d
conf_diff <- t.test(conf.mat$diff[conf.mat$agentCond==1], conf.mat$diff[conf.mat$agentCond==2], var.equal=TRUE, paired=TRUE); conf_diff
